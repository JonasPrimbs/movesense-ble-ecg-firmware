#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/

// Copyright (c) Suunto Oy 2014 - 2016. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_EXECUTION_CONTEXT_INSTANTION_REF(id)						static_cast<whiteboard::ExecutionContextId>(id)
#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
	static_cast<whiteboard::ResourceId::Value>( \
		(static_cast<uint32>(localResourceId) << 16) | \
		(static_cast<uint32>(whiteboardId) << 8) | \
		(static_cast<uint32>(executionContextId) << 4) | \
		(static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))

#define WB_CALLER_CONTEXT										whiteboard::ID_INVALID_EXECUTION_CONTEXT


/** Helper function for force linking of the library
* (Visual C will ignore whole library if none of the symbols are referenced)
*/
void pullInWbResources();

#include "../wb-resources/resources.h"
#include "../suunto_shared/resources.h"

#define WB_EXEC_CTX_PRIMARYSERVICES              WB_EXECUTION_CONTEXT_INSTANTION_REF(0)
#define WB_EXEC_CTX_APPLICATION                  WB_EXECUTION_CONTEXT_INSTANTION_REF(1)
#define WB_EXEC_CTX_MEAS                         WB_EXECUTION_CONTEXT_INSTANTION_REF(2)

namespace WB_RES {

WB_STRUCT_PACK_BEGIN()

struct SyncProviderStatusValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 513;

	enum Type
	{
		NOT_SYNCING = 0U,
		SYNCING = 1U,
		SYNC_BLOCKED = 2U
	};
};
typedef whiteboard::TypedEnum<SyncProviderStatusValues, SyncProviderStatusValues::Type, uint8> SyncProviderStatus;

struct SyncProviderServiceValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 514;

	enum Type
	{
		MOVESCOUNT_SERVICE = 1U,
		CACHE_SERVICE = 2U,
		INET_SERVICE = 4U
	};
};
typedef whiteboard::TypedEnum<SyncProviderServiceValues, SyncProviderServiceValues::Type, uint16> SyncProviderService;

struct SyncClientTypeValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 515;

	enum Type
	{
		INVALID = 0U,
		LOGBOOK = 1U,
		SETTINGS = 2U,
		SGEE = 3U,
		PLANNEDMOVES = 4U
	};
};
typedef whiteboard::TypedEnum<SyncClientTypeValues, SyncClientTypeValues::Type, uint8> SyncClientType;

struct SyncCommandValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 518;

	enum Type
	{
		STOP = 0U,
		START = 1U,
		PAUSE = 2U,
		RESET = 3U
	};
};
typedef whiteboard::TypedEnum<SyncCommandValues, SyncCommandValues::Type, uint8> SyncCommand;

struct SyncClientSyncStatusValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 519;

	enum Type
	{
		NO_SYNC_DATA = 0U,
		NEW_SYNC_DATA = 1U,
		SYNC_FAILURE = 2U,
		SYNC_CANCELLED = 3U
	};
};
typedef whiteboard::TypedEnum<SyncClientSyncStatusValues, SyncClientSyncStatusValues::Type, uint8> SyncClientSyncStatus;

struct InternetConnectionStatusValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 64;

	enum Type
	{
		DISCONNECTED = 0U,
		CONNECTED = 1U,
		WLAN = 2U,
		USB = 3U,
		BLE = 4U
	};
};
typedef whiteboard::TypedEnum<InternetConnectionStatusValues, InternetConnectionStatusValues::Type, uint8> InternetConnectionStatus;

struct InternetGatewaySyncStateValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 65;

	enum Type
	{
		NOT_SYNCHRONIZED = 0U,
		SYNCHRONIZING = 1U,
		READY = 2U,
		FAILURE = 3U
	};
};
typedef whiteboard::TypedEnum<InternetGatewaySyncStateValues, InternetGatewaySyncStateValues::Type, uint8> InternetGatewaySyncState;

struct InetGwMetadataTypeValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 66;

	enum Type
	{
		NONE = 0U,
		URLS = 1U,
		MODS = 2U,
		SBEM_TABLE = 3U
	};
};
typedef whiteboard::TypedEnum<InetGwMetadataTypeValues, InetGwMetadataTypeValues::Type, uint8> InetGwMetadataType;

struct TransferFormatValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 71;

	enum Type
	{
		INVALIDFORMAT = 0U,
		RAW = 1U,
		HEATSHRINK = 2U,
		FORMATCOUNT = 3U
	};
};
typedef whiteboard::TypedEnum<TransferFormatValues, TransferFormatValues::Type, uint8> TransferFormat;

struct UrlModifierValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 74;

	enum Type
	{
		SERVER = 0U,
		APPKEY = 1U,
		USERKEY = 2U,
		EMAIL = 3U,
		RUNTIME = 4U
	};
};
typedef whiteboard::TypedEnum<UrlModifierValues, UrlModifierValues::Type, uint8> UrlModifier;

struct ReadyToSyncStatusValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 520;

	enum Type
	{
		NOT_READY = 0U,
		READY = 1U
	};
};
typedef whiteboard::TypedEnum<ReadyToSyncStatusValues, ReadyToSyncStatusValues::Type, uint8> ReadyToSyncStatus;

struct InetGwConfigKeyValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 523;

	enum Type
	{
		USERAGENT = 1U
	};
};
typedef whiteboard::TypedEnum<InetGwConfigKeyValues, InetGwConfigKeyValues::Type, uint16> InetGwConfigKey;

struct WB_STRUCT_PACKED InetGwMetadataResource;
struct WB_STRUCT_PACKED InetGwMetadataElement;
struct WB_STRUCT_PACKED InetGwMetadataList;
struct WB_STRUCT_PACKED InetGwGetMetadataRequest;
struct WB_STRUCT_PACKED RequestData;
struct WB_STRUCT_PACKED HttpRequest;
struct WB_STRUCT_PACKED InetGwConnectivityNotification;
struct WB_STRUCT_PACKED InternetGatewayCredentials;
struct WB_STRUCT_PACKED SyncProviderClientData;
struct WB_STRUCT_PACKED SyncProviderClientList;
struct WB_STRUCT_PACKED ConnectivityCapabilities;
struct WB_STRUCT_PACKED ConnectivityState;
struct WB_STRUCT_PACKED InetGwConfigItem;
struct WB_STRUCT_PACKED InetGwConfig;

typedef uint8 SyncClientSyncProgress;

struct WB_STRUCT_PACKED InetGwMetadataResource
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 67;
	static const whiteboard::StructureValueSerializer<InetGwMetadataResource> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwMetadataResource> cleaner;)

	WB_ALIGN(1) InetGwMetadataType type;
	WB_ALIGN(1) uint8 id;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(type)
			.visit(id);
	}
};

struct WB_STRUCT_PACKED InetGwMetadataElement
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 68;
	static const whiteboard::StructureValueSerializer<InetGwMetadataElement> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwMetadataElement> cleaner;)

	WB_ALIGN(1) InetGwMetadataResource resource;
	WB_ALIGN(4) uint32 hash;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(resource)
			.visit(hash);
	}
};

struct WB_STRUCT_PACKED InetGwMetadataList
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 69;
	static const whiteboard::StructureValueSerializer<InetGwMetadataList> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwMetadataList> cleaner;)

	WB_ALIGN(4) whiteboard::Array< InetGwMetadataElement > element;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(element);
	}
};

struct WB_STRUCT_PACKED InetGwGetMetadataRequest
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 70;
	static const whiteboard::StructureValueSerializer<InetGwGetMetadataRequest> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwGetMetadataRequest> cleaner;)

	WB_ALIGN(1) InetGwMetadataResource resource;
	WB_ALIGN(2) uint16 length;
	WB_ALIGN(4) uint32 position;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(resource)
			.visit(length)
			.visit(position);
	}
};

struct WB_STRUCT_PACKED RequestData
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 72;
	static const whiteboard::StructureValueSerializer<RequestData> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<RequestData> cleaner;)

	WB_ALIGN(4) uint32 length;
	WB_ALIGN(4) whiteboard::Array< uint8 > data;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(length)
			.visit(data);
	}
};

struct WB_STRUCT_PACKED HttpRequest
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 73;
	static const whiteboard::StructureValueSerializer<HttpRequest> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<HttpRequest> cleaner;)

	WB_ALIGN(4) uint32 targetId;
	WB_ALIGN(2) uint16 fragmentStatus;
	WB_ALIGN(4) RequestData data;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(targetId)
			.visit(fragmentStatus)
			.visit(data);
	}
};

struct WB_STRUCT_PACKED InetGwConnectivityNotification
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 75;
	static const whiteboard::StructureValueSerializer<InetGwConnectivityNotification> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwConnectivityNotification> cleaner;)

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> serialNumber;
	WB_ALIGN(4) uint32 connectivityInfo;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(serialNumber)
			.visit(connectivityInfo);
	}
};

struct WB_STRUCT_PACKED InternetGatewayCredentials
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 512;
	static const whiteboard::StructureValueSerializer<InternetGatewayCredentials> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InternetGatewayCredentials> cleaner;)

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> serialNumber;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> userKey;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> appKey;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> server;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::WrapperFor32BitPointer<const char> > email;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(serialNumber)
			.visit(userKey)
			.visit(appKey)
			.visit(server)
			.visit(email);
	}
};

struct WB_STRUCT_PACKED SyncProviderClientData
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 516;
	static const whiteboard::StructureValueSerializer<SyncProviderClientData> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<SyncProviderClientData> cleaner;)

	WB_ALIGN(4) uint32 syncClientId;
	WB_ALIGN(1) SyncClientType syncClientType;
	WB_ALIGN(4) uint32 syncStateResourceId;
	WB_ALIGN(4) uint32 syncCommandResourceId;
	WB_ALIGN(4) uint32 syncProgressResourceId;
	WB_ALIGN(2) uint16 requiredServices;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(syncClientId)
			.visit(syncClientType)
			.visit(syncStateResourceId)
			.visit(syncCommandResourceId)
			.visit(syncProgressResourceId)
			.visit(requiredServices);
	}
};

struct WB_STRUCT_PACKED SyncProviderClientList
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 517;
	static const whiteboard::StructureValueSerializer<SyncProviderClientList> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<SyncProviderClientList> cleaner;)

	WB_ALIGN(1) uint8 numberOfClients;
	WB_ALIGN(4) whiteboard::Array< SyncProviderClientData > clients;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(numberOfClients)
			.visit(clients);
	}
};

struct WB_STRUCT_PACKED ConnectivityCapabilities
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 521;
	static const whiteboard::StructureValueSerializer<ConnectivityCapabilities> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<ConnectivityCapabilities> cleaner;)

	WB_ALIGN(1) bool movescountCapability;
	WB_ALIGN(1) bool cacheCapability;
	WB_ALIGN(1) bool internetCapability;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(movescountCapability)
			.visit(cacheCapability)
			.visit(internetCapability);
	}
};

struct WB_STRUCT_PACKED ConnectivityState
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 522;
	static const whiteboard::StructureValueSerializer<ConnectivityState> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<ConnectivityState> cleaner;)

	WB_ALIGN(1) InternetConnectionStatus connection;
	WB_ALIGN(1) ConnectivityCapabilities capabilities;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(connection)
			.visit(capabilities);
	}
};

struct WB_STRUCT_PACKED InetGwConfigItem
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 524;
	static const whiteboard::StructureValueSerializer<InetGwConfigItem> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwConfigItem> cleaner;)

	WB_ALIGN(2) InetGwConfigKey key;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> value;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(key)
			.visit(value);
	}
};

struct WB_STRUCT_PACKED InetGwConfig
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 525;
	static const whiteboard::StructureValueSerializer<InetGwConfig> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<InetGwConfig> cleaner;)

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> serialNumber;
	WB_ALIGN(4) whiteboard::Array< InetGwConfigItem > config;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(serialNumber)
			.visit(config);
	}
};

WB_STRUCT_PACK_END()

namespace LOCAL
{

struct ROOT;

struct INTERNETGATEWAY;

struct INTERNETGATEWAY_CLOUDCONNECTIONSTATUS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 512, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 512;

	struct GET
	{
		typedef InternetConnectionStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef InternetConnectionStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef InternetConnectionStatus NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INTERNETGATEWAY_CONFIGURATION
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 513, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 513;

	struct PUT
	{
		struct Parameters
		{
			struct DATA
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef InetGwConfig Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/Configuration */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets DATA parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::DATA::ConstReferenceType getData() const
			{
				return mrParameterList[Parameters::DATA::Index].convertTo<Parameters::DATA::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_CONNECTIVITY
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 514, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 514;

	struct PUT
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct CONNECTIVITYPARAMS
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef ConnectivityState Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/Connectivity */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

			/** Gets CONNECTIVITYPARAMS parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CONNECTIVITYPARAMS::ConstReferenceType getConnectivityParams() const
			{
				return mrParameterList[Parameters::CONNECTIVITYPARAMS::Index].convertTo<Parameters::CONNECTIVITYPARAMS::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct SUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef InetGwConnectivityNotification NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INTERNETGATEWAY_CREDENTIALS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 515, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 515;

	struct POST
	{
		struct Parameters
		{
			struct DATA
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef InternetGatewayCredentials Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/Credentials */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets DATA parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::DATA::ConstReferenceType getData() const
			{
				return mrParameterList[Parameters::DATA::Index].convertTo<Parameters::DATA::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct DELETE
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/Credentials */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_DEVICECONNECT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 516, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 516;

	struct PUT
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/DeviceConnect */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_DEVICEDISCONNECT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 517, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 517;

	struct PUT
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/DeviceDisconnect */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_FILEHTTPGET
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 518, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 518;

	struct PUT
	{
		struct Parameters
		{
			struct TARGETURLHASH
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			struct FILENAME
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM1
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM2
			{
				static const whiteboard::ParameterIndex Index = 3;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM3
			{
				static const whiteboard::ParameterIndex Index = 4;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM4
			{
				static const whiteboard::ParameterIndex Index = 5;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM5
			{
				static const whiteboard::ParameterIndex Index = 6;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM6
			{
				static const whiteboard::ParameterIndex Index = 7;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 8;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/FileHttpGet */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets TARGETURLHASH parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::TARGETURLHASH::ConstReferenceType getTargetUrlHash() const
			{
				return mrParameterList[Parameters::TARGETURLHASH::Index].convertTo<Parameters::TARGETURLHASH::ConstReferenceType>();
			}

			/** Gets FILENAME parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::FILENAME::ConstReferenceType getFileName() const
			{
				return mrParameterList[Parameters::FILENAME::Index].convertTo<Parameters::FILENAME::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM1 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam1() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM1::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM1::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM1 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM1::ConstReferenceType getRuntimeParam1() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM1::Index].convertTo<Parameters::RUNTIMEPARAM1::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM2 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam2() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM2::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM2::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM2 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM2::ConstReferenceType getRuntimeParam2() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM2::Index].convertTo<Parameters::RUNTIMEPARAM2::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM3 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam3() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM3::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM3::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM3 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM3::ConstReferenceType getRuntimeParam3() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM3::Index].convertTo<Parameters::RUNTIMEPARAM3::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM4 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam4() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM4::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM4::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM4 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM4::ConstReferenceType getRuntimeParam4() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM4::Index].convertTo<Parameters::RUNTIMEPARAM4::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM5 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam5() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM5::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM5::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM5 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM5::ConstReferenceType getRuntimeParam5() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM5::Index].convertTo<Parameters::RUNTIMEPARAM5::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM6 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam6() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM6::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM6::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM6 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM6::ConstReferenceType getRuntimeParam6() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM6::Index].convertTo<Parameters::RUNTIMEPARAM6::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_FILEHTTPGETCANCEL
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 519, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 519;

	struct PUT
	{
		struct Parameters
		{
			struct REQUESTID
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint16 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/FileHttpGetCancel */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets REQUESTID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::REQUESTID::ConstReferenceType getRequestId() const
			{
				return mrParameterList[Parameters::REQUESTID::Index].convertTo<Parameters::REQUESTID::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_FILEHTTPPUT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 520, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 520;

	struct PUT
	{
		struct Parameters
		{
			struct TARGETURLHASH
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			struct FILENAME
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM1
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM2
			{
				static const whiteboard::ParameterIndex Index = 3;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM3
			{
				static const whiteboard::ParameterIndex Index = 4;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM4
			{
				static const whiteboard::ParameterIndex Index = 5;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM5
			{
				static const whiteboard::ParameterIndex Index = 6;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM6
			{
				static const whiteboard::ParameterIndex Index = 7;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 8;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/FileHttpPut */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets TARGETURLHASH parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::TARGETURLHASH::ConstReferenceType getTargetUrlHash() const
			{
				return mrParameterList[Parameters::TARGETURLHASH::Index].convertTo<Parameters::TARGETURLHASH::ConstReferenceType>();
			}

			/** Gets FILENAME parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::FILENAME::ConstReferenceType getFileName() const
			{
				return mrParameterList[Parameters::FILENAME::Index].convertTo<Parameters::FILENAME::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM1 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam1() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM1::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM1::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM1 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM1::ConstReferenceType getRuntimeParam1() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM1::Index].convertTo<Parameters::RUNTIMEPARAM1::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM2 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam2() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM2::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM2::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM2 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM2::ConstReferenceType getRuntimeParam2() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM2::Index].convertTo<Parameters::RUNTIMEPARAM2::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM3 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam3() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM3::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM3::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM3 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM3::ConstReferenceType getRuntimeParam3() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM3::Index].convertTo<Parameters::RUNTIMEPARAM3::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM4 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam4() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM4::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM4::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM4 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM4::ConstReferenceType getRuntimeParam4() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM4::Index].convertTo<Parameters::RUNTIMEPARAM4::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM5 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam5() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM5::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM5::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM5 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM5::ConstReferenceType getRuntimeParam5() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM5::Index].convertTo<Parameters::RUNTIMEPARAM5::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM6 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam6() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM6::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM6::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM6 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM6::ConstReferenceType getRuntimeParam6() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM6::Index].convertTo<Parameters::RUNTIMEPARAM6::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_FILEHTTPPUTCANCEL
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 521, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 521;

	struct PUT
	{
		struct Parameters
		{
			struct REQUESTID
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint16 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/FileHttpPutCancel */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets REQUESTID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::REQUESTID::ConstReferenceType getRequestId() const
			{
				return mrParameterList[Parameters::REQUESTID::Index].convertTo<Parameters::REQUESTID::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_HTTPREQUEST
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 522, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 522;

	struct GET
	{
		typedef whiteboard::ByteStream Response_HTTP_CODE_CONTINUE_Type;
		typedef whiteboard::ByteStream Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct TARGETID
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			struct STREAMPOSITION
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM1
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM2
			{
				static const whiteboard::ParameterIndex Index = 3;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM3
			{
				static const whiteboard::ParameterIndex Index = 4;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM4
			{
				static const whiteboard::ParameterIndex Index = 5;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM5
			{
				static const whiteboard::ParameterIndex Index = 6;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct RUNTIMEPARAM6
			{
				static const whiteboard::ParameterIndex Index = 7;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 8;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/HttpRequest */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets TARGETID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::TARGETID::ConstReferenceType getTargetId() const
			{
				return mrParameterList[Parameters::TARGETID::Index].convertTo<Parameters::TARGETID::ConstReferenceType>();
			}

			/** Gets STREAMPOSITION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::STREAMPOSITION::ConstReferenceType getStreamPosition() const
			{
				return mrParameterList[Parameters::STREAMPOSITION::Index].convertTo<Parameters::STREAMPOSITION::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM1 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam1() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM1::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM1::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM1 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM1::ConstReferenceType getRuntimeParam1() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM1::Index].convertTo<Parameters::RUNTIMEPARAM1::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM2 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam2() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM2::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM2::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM2 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM2::ConstReferenceType getRuntimeParam2() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM2::Index].convertTo<Parameters::RUNTIMEPARAM2::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM3 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam3() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM3::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM3::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM3 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM3::ConstReferenceType getRuntimeParam3() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM3::Index].convertTo<Parameters::RUNTIMEPARAM3::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM4 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam4() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM4::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM4::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM4 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM4::ConstReferenceType getRuntimeParam4() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM4::Index].convertTo<Parameters::RUNTIMEPARAM4::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM5 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam5() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM5::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM5::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM5 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM5::ConstReferenceType getRuntimeParam5() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM5::Index].convertTo<Parameters::RUNTIMEPARAM5::ConstReferenceType>();
			}

			/** Checks whether optional parameter RUNTIMEPARAM6 has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasRuntimeParam6() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::RUNTIMEPARAM6::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::RUNTIMEPARAM6::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets RUNTIMEPARAM6 parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RUNTIMEPARAM6::ConstReferenceType getRuntimeParam6() const
			{
				return mrParameterList[Parameters::RUNTIMEPARAM6::Index].convertTo<Parameters::RUNTIMEPARAM6::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct REQUEST
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef HttpRequest Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/HttpRequest */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets REQUEST parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::REQUEST::ConstReferenceType getRequest() const
			{
				return mrParameterList[Parameters::REQUEST::Index].convertTo<Parameters::REQUEST::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_HTTPREQUESTFORMAT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 523, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 523;

	struct PUT
	{
		struct Parameters
		{
			struct TARGETID
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			struct FORMAT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef TransferFormat Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/HttpRequestFormat */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets TARGETID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::TARGETID::ConstReferenceType getTargetId() const
			{
				return mrParameterList[Parameters::TARGETID::Index].convertTo<Parameters::TARGETID::ConstReferenceType>();
			}

			/** Gets FORMAT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::FORMAT::ConstReferenceType getFormat() const
			{
				return mrParameterList[Parameters::FORMAT::Index].convertTo<Parameters::FORMAT::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_METADATA
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 524, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 524;

	struct GET
	{
		typedef whiteboard::ByteStream Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct RESOURCE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef InetGwGetMetadataRequest Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/Metadata */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets RESOURCE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RESOURCE::ConstReferenceType getResource() const
			{
				return mrParameterList[Parameters::RESOURCE::Index].convertTo<Parameters::RESOURCE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_METADATALIST
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 525, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 525;

	struct GET
	{
		typedef InetGwMetadataList Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INTERNETGATEWAY_RESERVECONNECTION
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 526, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 526;

	struct PUT
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct RESERVE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef bool Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/ReserveConnection */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets RESERVE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::RESERVE::ConstReferenceType getReserve() const
			{
				return mrParameterList[Parameters::RESERVE::Index].convertTo<Parameters::RESERVE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_SDSCONNECT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 527, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 527;

	struct PUT
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/SdsConnect */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_SDSCONNECT2
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 528, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 528;

	struct PUT
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct VERSIONINFO
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/SdsConnect2 */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

			/** Gets VERSIONINFO parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VERSIONINFO::ConstReferenceType getVersionInfo() const
			{
				return mrParameterList[Parameters::VERSIONINFO::Index].convertTo<Parameters::VERSIONINFO::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_SDSDISCONNECT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 529, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 529;

	struct PUT
	{
		struct Parameters
		{
			struct SERIALNUMBER
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /InternetGateway/SdsDisconnect */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SERIALNUMBER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SERIALNUMBER::ConstReferenceType getSerialNumber() const
			{
				return mrParameterList[Parameters::SERIALNUMBER::Index].convertTo<Parameters::SERIALNUMBER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct INTERNETGATEWAY_STATUS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 530, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 530;

	struct GET
	{
		typedef ConnectivityState Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef ConnectivityState Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef ConnectivityState NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct SYNCPROVIDER;

struct SYNCPROVIDER_ACTIVESYNCCLIENT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 531, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 531;

	struct GET
	{
		typedef SyncClientType Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef SyncClientType Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef SyncClientType NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct SYNCPROVIDER_BLOCKSYNC
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 532, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 532;

	struct GET
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct BLOCK
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef bool Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /SyncProvider/BlockSync */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets BLOCK parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::BLOCK::ConstReferenceType getBlock() const
			{
				return mrParameterList[Parameters::BLOCK::Index].convertTo<Parameters::BLOCK::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct SYNCPROVIDER_CLIENTS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 533, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 533;

	struct GET
	{
		typedef SyncProviderClientList Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct CLIENTDATA
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef SyncProviderClientData Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /SyncProvider/Clients */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets CLIENTDATA parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CLIENTDATA::ConstReferenceType getClientData() const
			{
				return mrParameterList[Parameters::CLIENTDATA::Index].convertTo<Parameters::CLIENTDATA::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct DELETE
	{
		struct Parameters
		{
			struct SYNCCLIENTID
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /SyncProvider/Clients */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SYNCCLIENTID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SYNCCLIENTID::ConstReferenceType getSyncClientId() const
			{
				return mrParameterList[Parameters::SYNCCLIENTID::Index].convertTo<Parameters::SYNCCLIENTID::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct SYNCPROVIDER_CLIENTSGLOBALSTATUS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 534, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 534;

	struct GET
	{
		typedef SyncClientSyncStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef SyncClientSyncStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef SyncClientSyncStatus NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct SYNCPROVIDER_READYTOSYNC
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 535, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 535;

	struct GET
	{
		typedef ReadyToSyncStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef ReadyToSyncStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef ReadyToSyncStatus NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct SYNCPROVIDER_STATUS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 536, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 536;

	struct GET
	{
		typedef SyncProviderStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef SyncProviderStatus Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef SyncProviderStatus NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};


} // namespace LOCAL

} // namespace WB_RES
