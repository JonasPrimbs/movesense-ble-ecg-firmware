#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/

// Copyright (c) Suunto Oy 2014 - 2016. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_EXECUTION_CONTEXT_INSTANTION_REF(id)					static_cast<whiteboard::ExecutionContextId>(id)
#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
	static_cast<whiteboard::ResourceId::Value>( \
		(static_cast<uint32>(localResourceId) << 16) | \
		(static_cast<uint32>(whiteboardId) << 8) | \
		(static_cast<uint32>(executionContextId) << 4) | \
		(static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))

#define WB_CALLER_CONTEXT										whiteboard::ID_INVALID_EXECUTION_CONTEXT


#include "../wb-resources/resources.h"
#include "../suunto_shared/resources.h"

#define WB_EXEC_CTX_PRIMARYSERVICES              WB_EXECUTION_CONTEXT_INSTANTION_REF(0)
#define WB_EXEC_CTX_APPLICATION                  WB_EXECUTION_CONTEXT_INSTANTION_REF(1)
#define WB_EXEC_CTX_MEAS                         WB_EXECUTION_CONTEXT_INSTANTION_REF(2)
#define WB_EXEC_CTX_UI                           WB_EXECUTION_CONTEXT_INSTANTION_REF(3)

namespace WB_RES {

WB_STRUCT_PACK_BEGIN()

struct WB_STRUCT_PACKED AddressInfo;
struct WB_STRUCT_PACKED AddressInfoArray;
struct WB_STRUCT_PACKED DeviceInfo;

struct WB_STRUCT_PACKED AddressInfo
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 12032;
	static const whiteboard::StructureValueSerializer<AddressInfo> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<AddressInfo> cleaner;)

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> name;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> address;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(name)
			.visit(address);
	}
};

struct WB_STRUCT_PACKED AddressInfoArray
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 12033;
	static const whiteboard::StructureValueSerializer<AddressInfoArray> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<AddressInfoArray> cleaner;)

	WB_ALIGN(4) whiteboard::Array< AddressInfo > addressInfo;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(addressInfo);
	}
};

struct WB_STRUCT_PACKED DeviceInfo
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 12034;
	static const whiteboard::StructureValueSerializer<DeviceInfo> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<DeviceInfo> cleaner;)

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> manufacturerName;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> productName;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> variant;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> hwCompatibilityId;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> serial;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> pcbaSerial;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> sw;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> hw;
	WB_ALIGN(4) whiteboard::Optional< VersionInfoArray > additionalVersionInfo;
	WB_ALIGN(4) whiteboard::Optional< AddressInfoArray > addressInfo;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(manufacturerName)
			.visit(productName)
			.visit(variant)
			.visit(hwCompatibilityId)
			.visit(serial)
			.visit(pcbaSerial)
			.visit(sw)
			.visit(hw)
			.visit(additionalVersionInfo)
			.visit(addressInfo);
	}
};

WB_STRUCT_PACK_END()

namespace LOCAL
{

struct ROOT;

struct INFO
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12032, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12032;

	struct GET
	{
		typedef DeviceInfo Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INFO_VERSION;

struct INFO_VERSION_BLE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12034, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12034;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INFO_VERSION_GPS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12035, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12035;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INFO_VERSION_HW
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12036, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12036;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INFO_VERSION_OHR
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12037, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12037;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INFO_VERSION_SW
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12038, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12038;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct INFO_VERSION_TOUCH
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 12039, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 12039;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};


} // namespace LOCAL

} // namespace WB_RES
