#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_EXECUTION_CONTEXT_INSTANTION_REF(id) static_cast<whiteboard::ExecutionContextId>(id)
#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))

#define WB_CALLER_CONTEXT whiteboard::ID_INVALID_EXECUTION_CONTEXT


#include "../wb-resources/resources.h"
#include "../suunto_shared/resources.h"

#define WB_EXEC_CTX_PRIMARYSERVICES              WB_EXECUTION_CONTEXT_INSTANTION_REF(0)
#define WB_EXEC_CTX_APPLICATION                  WB_EXECUTION_CONTEXT_INSTANTION_REF(1)
#define WB_EXEC_CTX_MEAS                         WB_EXECUTION_CONTEXT_INSTANTION_REF(2)
#define WB_EXEC_CTX_UI                           WB_EXECUTION_CONTEXT_INSTANTION_REF(3)

namespace WB_RES {

WB_STRUCT_PACK_BEGIN()

struct WB_STRUCT_PACKED ProductData;
struct WB_STRUCT_PACKED CalibrationMatrix;
struct WB_STRUCT_PACKED CalibrationData;
struct WB_STRUCT_PACKED Step;
struct WB_STRUCT_PACKED StepsDone;

struct WB_STRUCT_PACKED ProductData
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 19200;
	static const whiteboard::StructureValueSerializer<ProductData> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<ProductData> cleaner;)

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> manufacturerName;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> productName;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> variant;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::WrapperFor32BitPointer<const char> > design;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> hwCompatibilityId;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> serial;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> pcbaSerial;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> hw;
	WB_ALIGN(4) whiteboard::Optional< AddressInfoArray > addressInfo;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(manufacturerName)
			.visit(productName)
			.visit(variant)
			.visit(design)
			.visit(hwCompatibilityId)
			.visit(serial)
			.visit(pcbaSerial)
			.visit(hw)
			.visit(addressInfo);
	}
};

struct WB_STRUCT_PACKED CalibrationMatrix
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 19201;
	static const whiteboard::StructureValueSerializer<CalibrationMatrix> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<CalibrationMatrix> cleaner;)

	WB_ALIGN(4) whiteboard::Array< whiteboard::FloatVector3D > data;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(data);
	}
};

struct WB_STRUCT_PACKED CalibrationData
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 19202;
	static const whiteboard::StructureValueSerializer<CalibrationData> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<CalibrationData> cleaner;)

	WB_ALIGN(4) whiteboard::Optional< CalibrationMatrix > acc_matrix;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::FloatVector3D > acc_bias;
	WB_ALIGN(4) whiteboard::Optional< CalibrationMatrix > gyro_matrix;
	WB_ALIGN(4) whiteboard::Optional< CalibrationMatrix > magn_matrix;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::FloatVector3D > magn_bias;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(acc_matrix)
			.visit(acc_bias)
			.visit(gyro_matrix)
			.visit(magn_matrix)
			.visit(magn_bias);
	}
};

struct WB_STRUCT_PACKED Step
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 19203;
	static const whiteboard::StructureValueSerializer<Step> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<Step> cleaner;)

	WB_ALIGN(1) uint8 stepNum;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(stepNum);
	}
};

struct WB_STRUCT_PACKED StepsDone
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 19204;
	static const whiteboard::StructureValueSerializer<StepsDone> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<StepsDone> cleaner;)

	WB_ALIGN(4) whiteboard::Array< Step > steps;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(steps);
	}
};

WB_STRUCT_PACK_END()

namespace LOCAL
{

struct ROOT;

struct DEVICE;

struct DEVICE_MANUFACTURING;

struct DEVICE_MANUFACTURING_CALIBRATIONDATA
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 19200, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 19200;

	struct GET
	{
		typedef CalibrationData Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct POST
	{
		struct Parameters
		{
			struct DATA
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef CalibrationData Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Device/Manufacturing/CalibrationData */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets DATA parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::DATA::ConstReferenceType getData() const
			{
				return mrParameterList[Parameters::DATA::Index].convertTo<Parameters::DATA::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct DEVICE_MANUFACTURING_MEMORYERASE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 19201, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 19201;

	struct POST
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct DEVICE_MANUFACTURING_PRODUCTDATA
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 19202, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 19202;

	struct GET
	{
		typedef ProductData Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct POST
	{
		struct Parameters
		{
			struct DATA
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef ProductData Type;
				typedef const Type& ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Device/Manufacturing/ProductData */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets DATA parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::DATA::ConstReferenceType getData() const
			{
				return mrParameterList[Parameters::DATA::Index].convertTo<Parameters::DATA::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct DEVICE_MANUFACTURING_STEP
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_PRIMARYSERVICES;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 19203, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 19203;

	struct GET
	{
		typedef StepsDone Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct POST
	{
		struct Parameters
		{
			struct STEP
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef uint8 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Device/Manufacturing/Step */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets STEP parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::STEP::ConstReferenceType getStep() const
			{
				return mrParameterList[Parameters::STEP::Index].convertTo<Parameters::STEP::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};


} // namespace LOCAL

} // namespace WB_RES
