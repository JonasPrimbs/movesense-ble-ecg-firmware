#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"
#include "whiteboard/Result.h"
#include "whiteboard/ResourceClient.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))


#include "../wb-resources/resources.h"
#include "../movesense_types/resources.h"

#define WB_EXEC_CTX_APPLICATION                  static_cast<whiteboard::ExecutionContextId>(0)
#define WB_EXEC_CTX_MEAS                         static_cast<whiteboard::ExecutionContextId>(1)

namespace WB_RES {

struct GattPropertyValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18688;

	enum Type
	{
		AUTH_SIGNED_WR = 1U,
		BROADCAST = 2U,
		INDICATE = 3U,
		NOTIFY = 4U,
		READ = 5U,
		WRITE = 6U,
		WRITE_WO_RESP = 7U
	};
};
typedef whiteboard::TypedEnum<GattPropertyValues, GattPropertyValues::Type, uint8> GattProperty;

struct WB_ALIGN(4) GattChar;
struct WB_ALIGN(4) GattSvc;
struct WB_ALIGN(4) GattSvcList;
struct WB_ALIGN(4) Characteristic;

typedef int32 GattSvcHandle;

struct WB_ALIGN(4) GattChar
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18689;

	WB_ALIGN(4) whiteboard::Array< uint8 > uuid;
	WB_ALIGN(4) whiteboard::Array< GattProperty > props;
	WB_ALIGN(2) whiteboard::Optional< uint16 > handle;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::Array< uint8 > > initial_value;
};

struct WB_ALIGN(4) GattSvc
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18690;

	WB_ALIGN(4) whiteboard::Array< uint8 > uuid;
	WB_ALIGN(4) whiteboard::Array< GattChar > chars;
	WB_ALIGN(2) whiteboard::Optional< uint16 > handle;
};

struct WB_ALIGN(4) GattSvcList
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18691;

	WB_ALIGN(4) whiteboard::Array< GattSvc > services;
};

struct WB_ALIGN(4) Characteristic
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18692;

	WB_ALIGN(4) whiteboard::Array< uint8 > bytes;
	WB_ALIGN(1) whiteboard::Optional< bool > notifications;
};

namespace LOCAL 
{

struct ROOT;

struct COMM;

struct COMM_BLE;

struct COMM_BLE_GATTSVC
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 18688, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 18688;

	struct GET
	{
		typedef whiteboard::StronglyTypedResult<const GattSvcList&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck()
		{
		}
	};

	struct POST
	{
		typedef whiteboard::StronglyTypedResult<GattSvcHandle, whiteboard::HTTP_CODE_CREATED> HTTP_CODE_CREATED;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_INSUFFICIENT_STORAGE> HTTP_CODE_INSUFFICIENT_STORAGE;

		struct Parameters
		{
			struct DATA
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef GattSvc Type;
				typedef const Type& ConstReferenceType;
			};

			typedef DATA Parameter1;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets DATA parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::DATA::ConstReferenceType getData() const
			{
				return mrParameterList[Parameters::DATA::Index].convertTo<Parameters::DATA::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::DATA::ConstReferenceType)
		{
		}
	};
};

struct COMM_BLE_GATTSVC_SVCHANDLE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 18689, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 18689;

	struct GET
	{
		typedef whiteboard::StronglyTypedResult<const GattSvc&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_NOT_FOUND> HTTP_CODE_NOT_FOUND;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::SVCHANDLE::ConstReferenceType)
		{
		}
	};

	struct DELETE
	{
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_NOT_FOUND> HTTP_CODE_NOT_FOUND;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_NOT_IMPLEMENTED> HTTP_CODE_NOT_IMPLEMENTED;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::SVCHANDLE::ConstReferenceType)
		{
		}
	};
};

struct COMM_BLE_GATTSVC_SVCHANDLE_CHARHANDLE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 18690, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 18690;

	struct GET
	{
		typedef whiteboard::StronglyTypedResult<const Characteristic&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			struct CHARHANDLE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef CHARHANDLE Parameter2;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle}/{CharHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

			/** Gets CHARHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CHARHANDLE::ConstReferenceType getCharHandle() const
			{
				return mrParameterList[Parameters::CHARHANDLE::Index].convertTo<Parameters::CHARHANDLE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::SVCHANDLE::ConstReferenceType,
			Parameters::CHARHANDLE::ConstReferenceType)
		{
		}
	};

	struct PUT
	{
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_PRECOND_FAILED> HTTP_CODE_PRECOND_FAILED;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_REQUEST_TOO_LARGE> HTTP_CODE_REQUEST_TOO_LARGE;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			struct CHARHANDLE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef CHARHANDLE Parameter2;

			struct VALUE
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef Characteristic Type;
				typedef const Type& ConstReferenceType;
			};

			typedef VALUE Parameter3;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle}/{CharHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

			/** Gets CHARHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CHARHANDLE::ConstReferenceType getCharHandle() const
			{
				return mrParameterList[Parameters::CHARHANDLE::Index].convertTo<Parameters::CHARHANDLE::ConstReferenceType>();
			}

			/** Gets VALUE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VALUE::ConstReferenceType getValue() const
			{
				return mrParameterList[Parameters::VALUE::Index].convertTo<Parameters::VALUE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::SVCHANDLE::ConstReferenceType,
			Parameters::CHARHANDLE::ConstReferenceType,
			Parameters::VALUE::ConstReferenceType)
		{
		}
	};

	struct SUBSCRIBE
	{
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_PRECOND_FAILED> HTTP_CODE_PRECOND_FAILED;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			struct CHARHANDLE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef CHARHANDLE Parameter2;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle}/{CharHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

			/** Gets CHARHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CHARHANDLE::ConstReferenceType getCharHandle() const
			{
				return mrParameterList[Parameters::CHARHANDLE::Index].convertTo<Parameters::CHARHANDLE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::SVCHANDLE::ConstReferenceType,
			Parameters::CHARHANDLE::ConstReferenceType)
		{
		}
	};

	struct EVENT
	{
		typedef Characteristic NotificationType;
		typedef const NotificationType& ConstReferenceNotificationType;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			struct CHARHANDLE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef CHARHANDLE Parameter2;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle}/{CharHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Checks whether optional parameter SVCHANDLE has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasSvcHandle() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::SVCHANDLE::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::SVCHANDLE::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

			/** Checks whether optional parameter CHARHANDLE has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasCharHandle() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::CHARHANDLE::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::CHARHANDLE::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets CHARHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CHARHANDLE::ConstReferenceType getCharHandle() const
			{
				return mrParameterList[Parameters::CHARHANDLE::Index].convertTo<Parameters::CHARHANDLE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			const whiteboard::Api::OptionalParameter<ConstReferenceNotificationType>&,
			const whiteboard::Api::OptionalParameter<Parameters::SVCHANDLE::ConstReferenceType>& = whiteboard::NoType::NoValue,
			const whiteboard::Api::OptionalParameter<Parameters::CHARHANDLE::ConstReferenceType>& = whiteboard::NoType::NoValue)
		{
		}
	};

	struct UNSUBSCRIBE
	{
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			struct SVCHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef SVCHANDLE Parameter1;

			struct CHARHANDLE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef CHARHANDLE Parameter2;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/Ble/GattSvc/{SvcHandle}/{CharHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SVCHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SVCHANDLE::ConstReferenceType getSvcHandle() const
			{
				return mrParameterList[Parameters::SVCHANDLE::Index].convertTo<Parameters::SVCHANDLE::ConstReferenceType>();
			}

			/** Gets CHARHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CHARHANDLE::ConstReferenceType getCharHandle() const
			{
				return mrParameterList[Parameters::CHARHANDLE::Index].convertTo<Parameters::CHARHANDLE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::SVCHANDLE::ConstReferenceType,
			Parameters::CHARHANDLE::ConstReferenceType)
		{
		}
	};
};



} // namespace LOCAL 

} // namespace WB_RES
