#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"
#include "whiteboard/Result.h"
#include "whiteboard/ResourceClient.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))


#include "../wb-resources/resources.h"

#define WB_EXEC_CTX_APPLICATION                  static_cast<whiteboard::ExecutionContextId>(0)
#define WB_EXEC_CTX_MEAS                         static_cast<whiteboard::ExecutionContextId>(1)

namespace WB_RES {

struct WB_ALIGN(4) VersionInfo;
struct WB_ALIGN(4) VersionInfoArray;
struct WB_ALIGN(4) AddressInfo;
struct WB_ALIGN(4) HRData;

typedef uint64 TimestampFromStartup;
typedef const char* MacAddress48;

struct WB_ALIGN(4) VersionInfo
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 512;

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> name;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> version;
};

struct WB_ALIGN(4) VersionInfoArray
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 513;

	WB_ALIGN(4) whiteboard::Array< VersionInfo > versionInfo;
};

struct WB_ALIGN(4) AddressInfo
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 514;

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> name;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer<const char> address;
};

struct WB_ALIGN(4) HRData
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 515;

	WB_ALIGN(4) float average;
	WB_ALIGN(4) whiteboard::Array< uint16 > rrData;
};

namespace LOCAL 
{

struct ROOT;



} // namespace LOCAL 

} // namespace WB_RES
