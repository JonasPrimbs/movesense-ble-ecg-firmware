#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"
#include "whiteboard/Result.h"
#include "whiteboard/ResourceClient.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))


#include "../wb-resources/resources.h"
#include "../movesense_types/resources.h"

#define WB_EXEC_CTX_APPLICATION                  static_cast<whiteboard::ExecutionContextId>(0)
#define WB_EXEC_CTX_MEAS                         static_cast<whiteboard::ExecutionContextId>(1)

namespace WB_RES {

struct WB_ALIGN(4) ModuleStatus;
struct WB_ALIGN(4) ModulesStatusArray;
struct WB_ALIGN(4) AppInfo;
struct WB_ALIGN(4) DeviceInfo;

struct WB_ALIGN(4) ModuleStatus
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 3328;

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > name;
	WB_ALIGN(1) bool enabled;
};

struct WB_ALIGN(4) ModulesStatusArray
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 3329;

	WB_ALIGN(4) whiteboard::Array< ModuleStatus > data;
};

struct WB_ALIGN(4) AppInfo
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 3330;

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > name;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > version;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > company;
	WB_ALIGN(4) whiteboard::Optional< ModulesStatusArray > modules;
};

struct WB_ALIGN(4) DeviceInfo
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 3331;

	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > manufacturerName;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::WrapperFor32BitPointer< const char > > brandName;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > productName;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > variant;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::WrapperFor32BitPointer< const char > > design;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > hwCompatibilityId;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > serial;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > pcbaSerial;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > sw;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > hw;
	WB_ALIGN(4) whiteboard::Optional< VersionInfoArray > additionalVersionInfo;
	WB_ALIGN(4) whiteboard::Optional< whiteboard::Array< AddressInfo > > addressInfo;
	WB_ALIGN(4) whiteboard::WrapperFor32BitPointer< const char > apiLevel;
};

namespace LOCAL 
{

struct ROOT;

struct INFO
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 3328, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 3328;

	struct GET
	{
		typedef whiteboard::StronglyTypedResult<const DeviceInfo&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck()
		{
		}
	};
};

struct INFO_APP
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_MEAS;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 3329, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 3329;

	struct GET
	{
		typedef whiteboard::StronglyTypedResult<const AppInfo&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck()
		{
		}
	};
};



} // namespace LOCAL 

} // namespace WB_RES
