#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"
#include "whiteboard/Result.h"
#include "whiteboard/ResourceClient.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))


#include "../wb-resources/resources.h"
#include "../movesense_types/resources.h"

#define WB_EXEC_CTX_APPLICATION                  static_cast<whiteboard::ExecutionContextId>(0)
#define WB_EXEC_CTX_MEAS                         static_cast<whiteboard::ExecutionContextId>(1)

namespace WB_RES {

struct OWPeerStateValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18947;

	enum Type
	{
		DISCONNECTED = 0U,
		CONNECTED = 1U
	};
};
typedef whiteboard::TypedEnum<OWPeerStateValues, OWPeerStateValues::Type, uint8> OWPeerState;

struct OWPeerFlagsValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18944;

	enum Type
	{
		STANDARD_SPEED = 1U,
		OVERDRIVE_SPEED = 2U,
		BOTH_SPEEDS = 3U
	};
};
typedef whiteboard::TypedEnum<OWPeerFlagsValues, OWPeerFlagsValues::Type, uint8> OWPeerFlags;

struct WB_ALIGN(8) OWPeerEntry;
struct WB_ALIGN(4) OWPeerList;
struct WB_ALIGN(8) OWPeerChange;
struct WB_ALIGN(4) OWCommand;
struct WB_ALIGN(4) OWCommandResult;

struct WB_ALIGN(8) OWPeerEntry
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18945;

	WB_ALIGN(8) uint64 address;
	WB_ALIGN(4) whiteboard::Optional< int32 > handle;
	WB_ALIGN(1) OWPeerFlags flags;
};

struct WB_ALIGN(4) OWPeerList
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18946;

	WB_ALIGN(4) whiteboard::Array< OWPeerEntry > connectedPeers;
};

struct WB_ALIGN(8) OWPeerChange
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18948;

	WB_ALIGN(8) OWPeerEntry peer;
	WB_ALIGN(1) OWPeerState state;
};

struct WB_ALIGN(4) OWCommand
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18949;

	WB_ALIGN(4) whiteboard::Array< uint8 > dataOut;
	WB_ALIGN(1) uint8 readCount;
	WB_ALIGN(1) whiteboard::Optional< bool > contPrev;
};

struct WB_ALIGN(4) OWCommandResult
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 18950;

	WB_ALIGN(4) whiteboard::Array< uint8 > data;
};

namespace LOCAL 
{

struct ROOT;

struct COMM;

struct COMM_1WIRE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 18944, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 18944;

	struct SUBSCRIBE
	{
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck()
		{
		}
	};

	struct EVENT
	{
		typedef uint64 NotificationType;
		typedef NotificationType ConstReferenceNotificationType;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			const whiteboard::Api::OptionalParameter<ConstReferenceNotificationType>&)
		{
		}
	};

	struct UNSUBSCRIBE
	{
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck()
		{
		}
	};
};

struct COMM_1WIRE_PEERS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 18945, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 18945;

	struct GET
	{
		typedef whiteboard::StronglyTypedResult<const OWPeerList&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};

		/** Compile time type checking */
		inline static void typeCheck()
		{
		}
	};
};

struct COMM_1WIRE_PEERS_CONNHANDLE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 18946, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 18946;

	struct PUT
	{
		typedef whiteboard::StronglyTypedResult<const OWCommandResult&, whiteboard::HTTP_CODE_OK> HTTP_CODE_OK;
		typedef whiteboard::StronglyTypedResult<const whiteboard::NoType&, whiteboard::HTTP_CODE_NOT_FOUND> HTTP_CODE_NOT_FOUND;

		struct Parameters
		{
			struct CONNHANDLE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			typedef CONNHANDLE Parameter1;

			struct COMMAND
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef OWCommand Type;
				typedef const Type& ConstReferenceType;
			};

			typedef COMMAND Parameter2;

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Comm/1Wire/Peers/{ConnHandle} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets CONNHANDLE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::CONNHANDLE::ConstReferenceType getConnHandle() const
			{
				return mrParameterList[Parameters::CONNHANDLE::Index].convertTo<Parameters::CONNHANDLE::ConstReferenceType>();
			}

			/** Gets COMMAND parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::COMMAND::ConstReferenceType getCommand() const
			{
				return mrParameterList[Parameters::COMMAND::Index].convertTo<Parameters::COMMAND::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};

		/** Compile time type checking */
		inline static void typeCheck(
			Parameters::CONNHANDLE::ConstReferenceType,
			Parameters::COMMAND::ConstReferenceType)
		{
		}
	};
};



} // namespace LOCAL 

} // namespace WB_RES
