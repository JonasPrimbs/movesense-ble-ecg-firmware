#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_EXECUTION_CONTEXT_INSTANTION_REF(id) static_cast<whiteboard::ExecutionContextId>(id)
#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))

#define WB_CALLER_CONTEXT whiteboard::ID_INVALID_EXECUTION_CONTEXT


#include "../wb-resources/resources.h"
#include "../suunto_shared/resources.h"

#define WB_EXEC_CTX_PRIMARYSERVICES              WB_EXECUTION_CONTEXT_INSTANTION_REF(0)
#define WB_EXEC_CTX_APPLICATION                  WB_EXECUTION_CONTEXT_INSTANTION_REF(1)
#define WB_EXEC_CTX_MEAS                         WB_EXECUTION_CONTEXT_INSTANTION_REF(2)
#define WB_EXEC_CTX_UI                           WB_EXECUTION_CONTEXT_INSTANTION_REF(3)

namespace WB_RES {

WB_STRUCT_PACK_BEGIN()

WB_STRUCT_PACK_END()

namespace LOCAL
{

struct ROOT;

struct OUTDOOR;

struct OUTDOOR_STORMALARM;

struct OUTDOOR_STORMALARM_STATUS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 16896, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 16896;

	struct GET
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef bool NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct OUTDOOR_SUNFILTER;

struct OUTDOOR_SUNFILTER_TODAY
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_APPLICATION;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 16897, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 16897;

	struct GET
	{
		typedef uint32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct SUNFILTER
			{
				static const whiteboard::ParameterIndex Index = 0;

				struct TypeValues
				{
					static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 16896;
				
					enum Type
					{
						SUNRISE = 0,
						SUNSET = 1,
						CIVILDAWN = 2,
						CIVILDUSK = 3,
						NAUTIDAWN = 4,
						NAUTIDUSK = 5,
						ASTRODAWN = 6,
						ASTRODUSK = 7
					};
				};
				typedef whiteboard::TypedEnum<TypeValues, TypeValues::Type, int32> Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Outdoor/{SunFilter}/Today */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SUNFILTER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SUNFILTER::ConstReferenceType getSunFilter() const
			{
				return mrParameterList[Parameters::SUNFILTER::Index].convertTo<Parameters::SUNFILTER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct SUBSCRIBE
	{
		typedef uint32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct SUNFILTER
			{
				static const whiteboard::ParameterIndex Index = 0;

				struct TypeValues
				{
					static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 16896;
				
					enum Type
					{
						SUNRISE = 0,
						SUNSET = 1,
						CIVILDAWN = 2,
						CIVILDUSK = 3,
						NAUTIDAWN = 4,
						NAUTIDUSK = 5,
						ASTRODAWN = 6,
						ASTRODUSK = 7
					};
				};
				typedef whiteboard::TypedEnum<TypeValues, TypeValues::Type, int32> Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Outdoor/{SunFilter}/Today */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SUNFILTER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SUNFILTER::ConstReferenceType getSunFilter() const
			{
				return mrParameterList[Parameters::SUNFILTER::Index].convertTo<Parameters::SUNFILTER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct EVENT
	{
		typedef uint32 NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			struct SUNFILTER
			{
				static const whiteboard::ParameterIndex Index = 0;

				struct TypeValues
				{
					static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 16896;
				
					enum Type
					{
						SUNRISE = 0,
						SUNSET = 1,
						CIVILDAWN = 2,
						CIVILDUSK = 3,
						NAUTIDAWN = 4,
						NAUTIDUSK = 5,
						ASTRODAWN = 6,
						ASTRODUSK = 7
					};
				};
				typedef whiteboard::TypedEnum<TypeValues, TypeValues::Type, int32> Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Outdoor/{SunFilter}/Today */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets SUNFILTER parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SUNFILTER::ConstReferenceType getSunFilter() const
			{
				return mrParameterList[Parameters::SUNFILTER::Index].convertTo<Parameters::SUNFILTER::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};


} // namespace LOCAL

} // namespace WB_RES
