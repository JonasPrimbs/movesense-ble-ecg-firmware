#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/
// Copyright (c) Suunto Oy 2014 - 2017. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_EXECUTION_CONTEXT_INSTANTION_REF(id) static_cast<whiteboard::ExecutionContextId>(id)
#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
    static_cast<whiteboard::ResourceId::Value>( \
        (static_cast<uint32>(localResourceId) << 16) | \
        (static_cast<uint32>(whiteboardId) << 8) | \
        (static_cast<uint32>(executionContextId) << 4) | \
        (static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))

#define WB_CALLER_CONTEXT whiteboard::ID_INVALID_EXECUTION_CONTEXT


#include "../wb-resources/resources.h"
#include "../suunto_shared/resources.h"

#define WB_EXEC_CTX_PRIMARYSERVICES              WB_EXECUTION_CONTEXT_INSTANTION_REF(0)
#define WB_EXEC_CTX_APPLICATION                  WB_EXECUTION_CONTEXT_INSTANTION_REF(1)
#define WB_EXEC_CTX_MEAS                         WB_EXECUTION_CONTEXT_INSTANTION_REF(2)
#define WB_EXEC_CTX_UI                           WB_EXECUTION_CONTEXT_INSTANTION_REF(3)

namespace WB_RES {

WB_STRUCT_PACK_BEGIN()

struct DisplayModeValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 15616;

	enum Type
	{
		OFF = 0U,
		LOWPOWER = 1U,
		ON = 2U
	};
};
typedef whiteboard::TypedEnum<DisplayModeValues, DisplayModeValues::Type, uint8> DisplayMode;

struct TestFeatureIdValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 15618;

	enum Type
	{
		ALL = 0,
		LOCKPOWERSTATE = 1,
		DRAWUPDATEDREGIONBORDER = 2,
		MEASUREFPS = 3,
		MEASUREDFPS = 4,
		OPENDURATION = 5
	};
};
typedef whiteboard::TypedEnum<TestFeatureIdValues, TestFeatureIdValues::Type, int32> TestFeatureId;

struct WB_STRUCT_PACKED ScreenCaptureData;

struct WB_STRUCT_PACKED ScreenCaptureData
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 15619;
	static const whiteboard::StructureValueSerializer<ScreenCaptureData> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<ScreenCaptureData> cleaner;)

	WB_ALIGN(2) int16 x;
	WB_ALIGN(2) int16 y;
	WB_ALIGN(2) int16 width;
	WB_ALIGN(2) int16 height;
	WB_ALIGN(4) whiteboard::Array< uint32 > data;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(x)
			.visit(y)
			.visit(width)
			.visit(height)
			.visit(data);
	}
};

WB_STRUCT_PACK_END()

namespace LOCAL
{

struct ROOT;

struct UI;

struct UI_CONTROL;

struct UI_CONTROL_CLOSE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15616, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15616;

	struct PUT
	{
		struct Parameters
		{
			struct NAME
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Control/Close */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Checks whether optional parameter NAME has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasName() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::NAME::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::NAME::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets NAME parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::NAME::ConstReferenceType getName() const
			{
				return mrParameterList[Parameters::NAME::Index].convertTo<Parameters::NAME::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_CONTROL_OPEN
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15617, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15617;

	struct PUT
	{
		struct Parameters
		{
			struct NAME
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct SINGLEINSTANCE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef bool Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Control/Open */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets NAME parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::NAME::ConstReferenceType getName() const
			{
				return mrParameterList[Parameters::NAME::Index].convertTo<Parameters::NAME::ConstReferenceType>();
			}

			/** Checks whether optional parameter SINGLEINSTANCE has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasSingleInstance() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::SINGLEINSTANCE::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::SINGLEINSTANCE::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets SINGLEINSTANCE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SINGLEINSTANCE::ConstReferenceType getSingleInstance() const
			{
				return mrParameterList[Parameters::SINGLEINSTANCE::Index].convertTo<Parameters::SINGLEINSTANCE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_DATALINK;

struct UI_DATALINK_REQUESTITEMCOUNT;

struct UI_DATALINK_REQUESTITEMCOUNT_CURRENT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15618, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15618;

	struct GET
	{
		typedef uint8 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_DATALINK_REQUESTITEMCOUNT_MAX
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15619, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15619;

	struct GET
	{
		typedef uint8 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_DATALINK_REQUESTITEMCOUNT_PEAK
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15620, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15620;

	struct GET
	{
		typedef uint8 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_DATALINK_TRACK
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15621, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15621;

	struct PUT
	{
		struct Parameters
		{
			struct PATH
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/DataLink/Track */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets PATH parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::PATH::ConstReferenceType getPath() const
			{
				return mrParameterList[Parameters::PATH::Index].convertTo<Parameters::PATH::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_INPUT;

struct UI_INPUT_GESTURE;

struct UI_INPUT_GESTURE_PROGRESS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15622, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15622;

	struct GET
	{
		typedef float Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct SUBSCRIBE
	{
		typedef float Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef float NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_MEMORYPOOL;

struct UI_MEMORYPOOL_RESERVED
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15623, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15623;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_MEMORYPOOL_SIZE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15624, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15624;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_SCRIPT;

struct UI_SCRIPT_MEMORYPOOL;

struct UI_SCRIPT_MEMORYPOOL_PEAK
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15625, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15625;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_SCRIPT_MEMORYPOOL_RESERVED
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15626, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15626;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_SCRIPT_MEMORYPOOL_SIZE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15627, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15627;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_STYLE;

struct UI_STYLE_DOCLEN
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15628, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15628;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_STYLE_GROUPCOUNT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15629, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15629;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_STYLE_KEYFRAMESCOUNT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15630, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15630;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_TEST;

struct UI_TEST_DISPLAYMODE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15631, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15631;

	struct GET
	{
		typedef DisplayMode Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct MODE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef DisplayMode Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/DisplayMode */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets MODE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::MODE::ConstReferenceType getMode() const
			{
				return mrParameterList[Parameters::MODE::Index].convertTo<Parameters::MODE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_ECHO;

struct UI_TEST_ECHO_FLOAT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15632, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15632;

	struct GET
	{
		typedef float Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct VALUE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef float Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/Echo/Float */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VALUE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VALUE::ConstReferenceType getValue() const
			{
				return mrParameterList[Parameters::VALUE::Index].convertTo<Parameters::VALUE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct SUBSCRIBE
	{
		typedef float Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef float NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_TEST_FLASH;

struct UI_TEST_FLASH_DATA
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15633, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15633;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct ADDRESS
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/Flash/Data */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Checks whether optional parameter ADDRESS has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasAddress() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::ADDRESS::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::ADDRESS::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets ADDRESS parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::ADDRESS::ConstReferenceType getAddress() const
			{
				return mrParameterList[Parameters::ADDRESS::Index].convertTo<Parameters::ADDRESS::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_FLASH_SIZE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15634, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15634;

	struct GET
	{
		typedef uint32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_TEST_INVALIDATEVIEW
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15635, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15635;

	struct PUT
	{
		struct Parameters
		{
			struct NAME
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/InvalidateView */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Checks whether optional parameter NAME has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasName() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::NAME::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::NAME::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets NAME parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::NAME::ConstReferenceType getName() const
			{
				return mrParameterList[Parameters::NAME::Index].convertTo<Parameters::NAME::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_MEMORYPOOLGCALWAYS
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15636, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15636;

	struct GET
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct VALUE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef bool Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/MemoryPoolGcAlways */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VALUE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VALUE::ConstReferenceType getValue() const
			{
				return mrParameterList[Parameters::VALUE::Index].convertTo<Parameters::VALUE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_MEMORYPOOLSHUFFLING
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15637, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15637;

	struct GET
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct VALUE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef bool Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/MemoryPoolShuffling */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VALUE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VALUE::ConstReferenceType getValue() const
			{
				return mrParameterList[Parameters::VALUE::Index].convertTo<Parameters::VALUE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_SCREENCAPTURE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15638, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15638;

	struct GET
	{
		typedef ScreenCaptureData Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct X
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct Y
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct BPP
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/ScreenCapture */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Checks whether optional parameter X has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasX() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::X::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::X::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets X parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::X::ConstReferenceType getX() const
			{
				return mrParameterList[Parameters::X::Index].convertTo<Parameters::X::ConstReferenceType>();
			}

			/** Checks whether optional parameter Y has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasY() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::Y::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::Y::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets Y parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::Y::ConstReferenceType getY() const
			{
				return mrParameterList[Parameters::Y::Index].convertTo<Parameters::Y::ConstReferenceType>();
			}

			/** Checks whether optional parameter BPP has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasBPP() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::BPP::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::BPP::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets BPP parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::BPP::ConstReferenceType getBPP() const
			{
				return mrParameterList[Parameters::BPP::Index].convertTo<Parameters::BPP::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct PUT
	{
		typedef uint32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct BPP
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct FRAMECOUNT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/ScreenCapture */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Checks whether optional parameter BPP has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasBPP() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::BPP::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::BPP::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets BPP parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::BPP::ConstReferenceType getBPP() const
			{
				return mrParameterList[Parameters::BPP::Index].convertTo<Parameters::BPP::ConstReferenceType>();
			}

			/** Checks whether optional parameter FRAMECOUNT has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasFrameCount() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::FRAMECOUNT::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::FRAMECOUNT::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets FRAMECOUNT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::FRAMECOUNT::ConstReferenceType getFrameCount() const
			{
				return mrParameterList[Parameters::FRAMECOUNT::Index].convertTo<Parameters::FRAMECOUNT::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_TRACK
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15639, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15639;

	struct PUT
	{
		struct Parameters
		{
			struct VALUE
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef bool Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/Track */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VALUE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VALUE::ConstReferenceType getValue() const
			{
				return mrParameterList[Parameters::VALUE::Index].convertTo<Parameters::VALUE::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter VIEWINDEX has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasViewIndex() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::VIEWINDEX::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::VIEWINDEX::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_USERINPUT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15640, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15640;

	struct PUT
	{
		struct Parameters
		{
			struct COMMANDS
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/UserInput */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets COMMANDS parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::COMMANDS::ConstReferenceType getCommands() const
			{
				return mrParameterList[Parameters::COMMANDS::Index].convertTo<Parameters::COMMANDS::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TEST_VALUE;

struct UI_TEST_VALUE_FEATUREID
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15641, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15641;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct FEATUREID
			{
				static const whiteboard::ParameterIndex Index = 0;

				struct TypeValues
				{
					static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 15617;
				
					enum Type
					{
						ALL = 0,
						LOCKPOWERSTATE = 1,
						DRAWUPDATEDREGIONBORDER = 2,
						MEASUREFPS = 3,
						MEASUREDFPS = 4,
						OPENDURATION = 5
					};
				};
				typedef whiteboard::TypedEnum<TypeValues, TypeValues::Type, int32> Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/Value/{FeatureId} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets FEATUREID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::FEATUREID::ConstReferenceType getFeatureId() const
			{
				return mrParameterList[Parameters::FEATUREID::Index].convertTo<Parameters::FEATUREID::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};

	struct PUT
	{
		struct Parameters
		{
			struct FEATUREID
			{
				static const whiteboard::ParameterIndex Index = 0;

				struct TypeValues
				{
					static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 15617;
				
					enum Type
					{
						ALL = 0,
						LOCKPOWERSTATE = 1,
						DRAWUPDATEDREGIONBORDER = 2,
						MEASUREFPS = 3,
						MEASUREDFPS = 4,
						OPENDURATION = 5
					};
				};
				typedef whiteboard::TypedEnum<TypeValues, TypeValues::Type, int32> Type;
				typedef Type ConstReferenceType;
			};

			struct VALUE
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 2;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/Test/Value/{FeatureId} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets FEATUREID parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::FEATUREID::ConstReferenceType getFeatureId() const
			{
				return mrParameterList[Parameters::FEATUREID::Index].convertTo<Parameters::FEATUREID::ConstReferenceType>();
			}

			/** Gets VALUE parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VALUE::ConstReferenceType getValue() const
			{
				return mrParameterList[Parameters::VALUE::Index].convertTo<Parameters::VALUE::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_TIME
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15642, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15642;

	struct GET
	{
		typedef uint32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_VIEW;

struct UI_VIEW_STACK;

struct UI_VIEW_STACK_HEIGHT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15643, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15643;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_VIEW_STACK_MAXHEIGHT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15644, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15644;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX;

struct UI_VIEW_STACK_VIEWINDEX_ALLOCATED
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15645, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15645;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Allocated */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT;

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_HEIGHT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15646, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15646;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Height */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_INFO
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15647, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15647;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Info */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_LEFT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15648, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15648;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Left */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_MEMORYREPORT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15649, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15649;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/MemoryReport */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_STYLE
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15650, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15650;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Style */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_STYLE_PROPERTY
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15651, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15651;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct PROPERTY
			{
				static const whiteboard::ParameterIndex Index = 1;

				struct TypeValues
				{
					static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 15620;
				
					enum Type
					{
						LEFT = 0,
						TOP = 1,
						WIDTH = 2,
						HEIGHT = 3,
						PADDINGLEFT = 4,
						PADDINGTOP = 5,
						PADDINGRIGHT = 6,
						PADDINGBOTTOM = 7,
						BORDERLEFT = 8,
						BORDERTOP = 9,
						BORDERRIGHT = 10,
						BORDERBOTTOM = 11,
						FONTSIZE = 12,
						OPACITY = 13,
						MARGINLEFT = 14,
						MARGINTOP = 15,
						MARGINRIGHT = 16,
						MARGINBOTTOM = 17,
						POSITION = 18,
						VISIBILITY = 19,
						DISPLAY = 20,
						TEXTALIGN = 21,
						VERTICALALIGN = 22,
						BORDERCOLOR = 23,
						ZINDEX = 24,
						BACKGROUNDCOLOR = 25,
						COLOR = 26,
						FONT = 27,
						BOXSIZING = 28
					};
				};
				typedef whiteboard::TypedEnum<TypeValues, TypeValues::Type, int32> Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 3;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 4;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Style/{Property} */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets PROPERTY parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::PROPERTY::ConstReferenceType getProperty() const
			{
				return mrParameterList[Parameters::PROPERTY::Index].convertTo<Parameters::PROPERTY::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_TEXT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15652, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15652;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Text */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_TOP
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15653, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15653;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Top */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_VISIBILITY
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15654, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15654;

	struct GET
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Visibility */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_ELEMENT_WIDTH
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15655, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15655;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			struct SELECT
			{
				static const whiteboard::ParameterIndex Index = 1;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			struct OPTION
			{
				static const whiteboard::ParameterIndex Index = 2;

				typedef const char* Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 3;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Element/Width */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

			/** Gets SELECT parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::SELECT::ConstReferenceType getSelect() const
			{
				return mrParameterList[Parameters::SELECT::Index].convertTo<Parameters::SELECT::ConstReferenceType>();
			}

			/** Checks whether optional parameter OPTION has a value
			*
			* @return A value indicating whether the parameter has a value
			*/
			inline bool hasOption() const
			{
				if (mrParameterList.getNumberOfParameters() <= Parameters::OPTION::Index)
				{
					return false;
				}

				return mrParameterList[Parameters::OPTION::Index].getType() != whiteboard::WB_TYPE_NONE;
			}

			/** Gets OPTION parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::OPTION::ConstReferenceType getOption() const
			{
				return mrParameterList[Parameters::OPTION::Index].convertTo<Parameters::OPTION::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_LOADED
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15656, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15656;

	struct GET
	{
		typedef bool Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Loaded */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_SCRIPT;

struct UI_VIEW_STACK_VIEWINDEX_SCRIPT_FUNCTIONCOUNT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15657, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15657;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Script/FunctionCount */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_SCRIPT_RESERVED
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15658, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15658;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Script/Reserved */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_STYLE;

struct UI_VIEW_STACK_VIEWINDEX_STYLE_DOCLEN
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15659, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15659;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Style/DocLen */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_STYLE_GROUPCOUNT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15660, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15660;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Style/GroupCount */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_STYLE_KEYFRAMESCOUNT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15661, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15661;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/Style/KeyframesCount */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_VIEWHASH
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15662, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15662;

	struct GET
	{
		typedef int32 Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/ViewHash */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};

struct UI_VIEW_STACK_VIEWINDEX_VIEWNAME
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 15663, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 15663;

	struct GET
	{
		typedef const char* Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			struct VIEWINDEX
			{
				static const whiteboard::ParameterIndex Index = 0;

				typedef int32 Type;
				typedef Type ConstReferenceType;
			};

			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 1;
		};

		/** Reference wrapper for strongly typed parameter list for /Ui/View/Stack/{ViewIndex}/ViewName */
		class ParameterListRef
		{
		private:
			/** Prevent use of default constructor */
			ParameterListRef() DELETED;

			/** Prevent use of copy constructor */
			ParameterListRef(const ParameterListRef&) DELETED;

			/** Prevent use of assignment operator */
			const ParameterListRef& operator=(const ParameterListRef&) DELETED;

		public:
			/** Constructor that initializes this class from existing parameter list
			*
			* @param rParameterList Reference to parameter list that contains untyped parameters
			*/
			inline ParameterListRef(const whiteboard::ParameterList& rParameterList)
				: mrParameterList(rParameterList)
			{
			}

			/** Gets VIEWINDEX parameter value
			*
			* @return Current parameter value
			*/
			inline Parameters::VIEWINDEX::ConstReferenceType getViewIndex() const
			{
				return mrParameterList[Parameters::VIEWINDEX::Index].convertTo<Parameters::VIEWINDEX::ConstReferenceType>();
			}

		private:
			/** Reference to actual parameter list */
			const whiteboard::ParameterList& mrParameterList;
		};
	};
};


} // namespace LOCAL

} // namespace WB_RES
