#pragma once
/***********************************************************************
* THIS FILE HAS BEEN GENERATED BY WBRES TOOL. DO NOT TRY TO CHANGE IT. *
***********************************************************************/

// Copyright (c) Suunto Oy 2014 - 2016. All rights reserved.

#include "whiteboard/Identifiers.h"
#include "whiteboard/ParameterList.h"

#include "whiteboard/builtinTypes/Array.h"
#include "whiteboard/builtinTypes/ByteStream.h"
#include "whiteboard/builtinTypes/Date.h"
#include "whiteboard/builtinTypes/DateTime.h"
#include "whiteboard/builtinTypes/Optional.h"
#include "whiteboard/builtinTypes/Structures.h"
#include "whiteboard/builtinTypes/Time.h"
#include "whiteboard/builtinTypes/Timestamp.h"
#include "whiteboard/builtinTypes/TypedEnum.h"
#include "whiteboard/builtinTypes/Vector2D.h"
#include "whiteboard/builtinTypes/Vector3D.h"
#include "whiteboard/builtinTypes/WrapperFor32BitPointer.h"

#define WB_EXECUTION_CONTEXT_INSTANTION_REF(id)					static_cast<whiteboard::ExecutionContextId>(id)
#define WB_RESOURCE_VALUE(whiteboardId, localResourceId, executionContextId) \
	static_cast<whiteboard::ResourceId::Value>( \
		(static_cast<uint32>(localResourceId) << 16) | \
		(static_cast<uint32>(whiteboardId) << 8) | \
		(static_cast<uint32>(executionContextId) << 4) | \
		(static_cast<uint32>(whiteboard::ID_INVALID_RESOURCE_INSTANCE)))

#define WB_CALLER_CONTEXT										whiteboard::ID_INVALID_EXECUTION_CONTEXT


#include "../wb-resources/resources.h"
#include "../suunto_shared/resources.h"

#define WB_EXEC_CTX_PRIMARYSERVICES              WB_EXECUTION_CONTEXT_INSTANTION_REF(0)
#define WB_EXEC_CTX_APPLICATION                  WB_EXECUTION_CONTEXT_INSTANTION_REF(1)
#define WB_EXEC_CTX_MEAS                         WB_EXECUTION_CONTEXT_INSTANTION_REF(2)
#define WB_EXEC_CTX_UI                           WB_EXECUTION_CONTEXT_INSTANTION_REF(3)

namespace WB_RES {

WB_STRUCT_PACK_BEGIN()

struct ButtonHoldTimeValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 8192;

	enum Type
	{
		BUTTON_REPEAT_TIME = 600U,
		BUTTON_LONG_HOLD_TIME = 1200U
	};
};
typedef whiteboard::TypedEnum<ButtonHoldTimeValues, ButtonHoldTimeValues::Type, uint16> ButtonHoldTime;

struct ButtonIdValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 8193;

	enum Type
	{
		TOP_BUTTON = 0U,
		MIDDLE_BUTTON = 1U,
		BOTTOM_BUTTON = 2U,
		NUMBER_OF_BUTTONS = 3U
	};
};
typedef whiteboard::TypedEnum<ButtonIdValues, ButtonIdValues::Type, uint8> ButtonId;

struct ButtonEventValues
{
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 8194;

	enum Type
	{
		NO_EVENT = 0U,
		BUTTON_UP = 1U,
		BUTTON_DOWN = 2U,
		BUTTON_HELD = 3U,
		BUTTON_LONG_HELD = 4U,
		BUTTON_PRESSED = 5U,
		BUTTON_LONG_PRESSED = 6U
	};
};
typedef whiteboard::TypedEnum<ButtonEventValues, ButtonEventValues::Type, uint8> ButtonEvent;

struct WB_STRUCT_PACKED ButtonState;
struct WB_STRUCT_PACKED ButtonArray;

struct WB_STRUCT_PACKED ButtonState
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 8195;
	static const whiteboard::StructureValueSerializer<ButtonState> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<ButtonState> cleaner;)

	WB_ALIGN(1) ButtonId id;
	WB_ALIGN(1) ButtonEvent event;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(id)
			.visit(event);
	}
};

struct WB_STRUCT_PACKED ButtonArray
{
	// Structure type identification and serialization
	typedef int Structure;
	static const whiteboard::LocalDataTypeId DATA_TYPE_ID = 8196;
	static const whiteboard::StructureValueSerializer<ButtonArray> serializer;
	WB_WHEN_STRUCTURE_CLEANING_NEEDED(static const whiteboard::StructureValueCleaner<ButtonArray> cleaner;)

	WB_ALIGN(4) whiteboard::Array< ButtonState > states;

	inline void visit(whiteboard::IStructureVisitor& rVisitor)
	{
		rVisitor
			.visit(states);
	}
};

WB_STRUCT_PACK_END()

namespace LOCAL
{

struct ROOT;

struct DEVICE;

struct DEVICE_USERINTERACTION;

struct DEVICE_USERINTERACTION_BUTTON;

struct DEVICE_USERINTERACTION_BUTTON_EVENT
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 8192, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 8192;

	struct SUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};

	struct EVENT
	{
		typedef ButtonState NotificationType;
	};

	struct UNSUBSCRIBE
	{
		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};

struct DEVICE_USERINTERACTION_BUTTON_STATES
{
	static const whiteboard::ExecutionContextId EXECUTION_CONTEXT = WB_EXEC_CTX_UI;
	static const whiteboard::ResourceId::Value ID = WB_RESOURCE_VALUE(0, 8193, EXECUTION_CONTEXT);
	static const whiteboard::LocalResourceId LID = 8193;

	struct GET
	{
		typedef ButtonArray Response_HTTP_CODE_OK_Type;

		struct Parameters
		{
			static const whiteboard::ParameterIndex NUMBER_OF_PARAMETERS = 0;
		};
	};
};


} // namespace LOCAL

} // namespace WB_RES
